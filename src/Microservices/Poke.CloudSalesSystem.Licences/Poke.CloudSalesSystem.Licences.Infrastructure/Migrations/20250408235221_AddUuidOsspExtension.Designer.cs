// <auto-generated />
using System;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Poke.CloudSalesSystem.Licences.Infrastructure.Migrations
{
    [DbContext(typeof(LicencesDbContext))]
    [Migration("20250408235221_AddUuidOsspExtension")]
    partial class AddUuidOsspExtension
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.LicenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<Guid>("ExternalLicenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalLicenceId");

                    b.Property<Guid>("ExternalSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalSubscriptionId");

                    b.Property<string>("LicenceKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("licenceKey");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptionId");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validTo");

                    b.HasKey("Id")
                        .HasName("pK_licences");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("iX_licences_subscriptionId");

                    b.ToTable("licences", (string)null);
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerId");

                    b.HasKey("Id")
                        .HasName("pK_services");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<Guid>("ExternalSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalSubscriptionId");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceId");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serviceName");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pK_subscriptions");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("iX_subscriptions_serviceId");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.LicenceEntity", b =>
                {
                    b.HasOne("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", "Subscription")
                        .WithMany("Licences")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_licences_subscriptionEntity_subscriptionId");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.HasOne("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_subscriptions_services_serviceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.Navigation("Licences");
                });
#pragma warning restore 612, 618
        }
    }
}
