// <auto-generated />
using System;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Poke.CloudSalesSystem.Licences.Infrastructure.Migrations
{
    [DbContext(typeof(LicencesDbContext))]
    [Migration("20250409211611_UpdateSubscriptionSeed")]
    partial class UpdateSubscriptionSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.LicenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<Guid>("ExternalLicenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalLicenceId");

                    b.Property<Guid>("ExternalSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalSubscriptionId");

                    b.Property<string>("LicenceKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("licenceKey");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptionId");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validTo");

                    b.HasKey("Id")
                        .HasName("pK_licences");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("iX_licences_subscriptionId");

                    b.ToTable("licences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("230950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("a511a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b337547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "VP043-ZGVRR-PQDWP-LRT2B",
                            Status = 1,
                            SubscriptionId = new Guid("2284eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 12, 28, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2563), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("240950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("a611a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b337547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "MBBR0-DIBY8-ZVCJX-XWUJR",
                            Status = 1,
                            SubscriptionId = new Guid("2284eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 12, 18, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2611), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("250950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("a711a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b337547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "9UOKC-OHM51-9ICVM-Q2CWQ",
                            Status = 1,
                            SubscriptionId = new Guid("2284eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 9, 20, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2622), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("260950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("a811a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "MBC7W-C39F8-DB8I3-SL91K",
                            Status = 1,
                            SubscriptionId = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 5, 19, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2640), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("270950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("a911a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "W81JA-MMW96-JOGII-MZBGI",
                            Status = 1,
                            SubscriptionId = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 10, 26, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2683), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("280950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("aa11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "9LL1F-VN59G-RPZ1V-21VI6",
                            Status = 1,
                            SubscriptionId = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 11, 4, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2696), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("290950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("ab11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "03M0E-8SO77-AGZYE-XZB3B",
                            Status = 1,
                            SubscriptionId = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 12, 24, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2707), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2a0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("ac11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "MSYEF-PFFXM-CMUM6-BOOD1",
                            Status = 1,
                            SubscriptionId = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 11, 5, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2717), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2b0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("ad11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "UV1JU-J26T0-BM28T-2IY7Z",
                            Status = 1,
                            SubscriptionId = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 7, 11, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2732), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2c0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("ae11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "YS9P5-PP165-HZCLI-6ASH3",
                            Status = 1,
                            SubscriptionId = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2026, 1, 5, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2744), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2d0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("af11a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "S9XYK-OW8UO-FRCTP-H2VQL",
                            Status = 1,
                            SubscriptionId = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2026, 1, 21, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2754), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2e0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("b011a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "F0OKW-3W67J-KVV31-43CZZ",
                            Status = 1,
                            SubscriptionId = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2026, 1, 5, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2784), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("2f0950e0-fb93-406d-bf9d-61aee5de4506"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalLicenceId = new Guid("b111a5be-f12d-4ce5-999e-9f6623de4d54"),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            LicenceKey = "5A663-IY8X0-GP8ND-103D6",
                            Status = 1,
                            SubscriptionId = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            ValidTo = new DateTimeOffset(new DateTime(2025, 6, 11, 21, 16, 11, 452, DateTimeKind.Unspecified).AddTicks(2794), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("providerId");

                    b.HasKey("Id")
                        .HasName("pK_services");

                    b.ToTable("services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d284eb26-9d42-4c16-89cb-ce75e0ab5afa"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Service 1 description...",
                            Name = "Service 1",
                            ProviderId = new Guid("d484eb26-9d42-4c16-89cb-ce75e0ab5afa")
                        },
                        new
                        {
                            Id = new Guid("d384eb26-9d42-4c16-89cb-ce75e0ab5afa"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Service 2 description...",
                            Name = "Service 2",
                            ProviderId = new Guid("d484eb26-9d42-4c16-89cb-ce75e0ab5afa")
                        });
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountId");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<Guid>("ExternalSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("externalSubscriptionId");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceId");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serviceName");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pK_subscriptions");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("iX_subscriptions_serviceId");

                    b.ToTable("subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2284eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalSubscriptionId = new Guid("b337547d-4f1c-4b17-b464-8e4e28899a8b"),
                            Quantity = 5,
                            ServiceId = new Guid("d284eb26-9d42-4c16-89cb-ce75e0ab5afa"),
                            ServiceName = "Service 1 name...",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2384eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            AccountId = new Guid("61db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalSubscriptionId = new Guid("b437547d-4f1c-4b17-b464-8e4e28899a8b"),
                            Quantity = 10,
                            ServiceId = new Guid("d384eb26-9d42-4c16-89cb-ce75e0ab5afa"),
                            ServiceName = "Service 2 name...",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2484eda3-29ec-4bf1-b077-225a2bcbfdc1"),
                            AccountId = new Guid("62db564e-5ef0-4614-9127-562a8b2856db"),
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalSubscriptionId = new Guid("b537547d-4f1c-4b17-b464-8e4e28899a8b"),
                            Quantity = 15,
                            ServiceId = new Guid("d384eb26-9d42-4c16-89cb-ce75e0ab5afa"),
                            ServiceName = "Service 2 name...",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.LicenceEntity", b =>
                {
                    b.HasOne("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", "Subscription")
                        .WithMany("Licences")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_licences_subscriptions_subscriptionId");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.HasOne("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_subscriptions_services_serviceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.ServiceEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Poke.CloudSalesSystem.Licences.Domain.Model.SubscriptionEntity", b =>
                {
                    b.Navigation("Licences");
                });
#pragma warning restore 612, 618
        }
    }
}
